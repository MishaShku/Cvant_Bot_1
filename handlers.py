import random

from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram import Router
import asyncio

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

agr = ""

user_router = Router()


emoji = ['ü§Ø', 'ü§£', '‚úåÔ∏è', 'üòÇ', '‚ù§Ô∏è']

class Reg(StatesGroup):
    name = State()
    agreement = State()
    password = State()
    number = State()


class Pull(StatesGroup):
    call = State()


@user_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(Reg.agreement)
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç! –°–æ–≥–ª–∞—Å–µ–Ω –ª–∏ —Ç—ã –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?')


@user_router.message(Reg.agreement)
async def agreement(message: Message, state: FSMContext):
    global agr
    agr = message.text.lower()
    await state.update_data(agreement=message.text)
    if message.text.lower() == '–¥–∞':
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:')
    else:
        await message.answer(text='–û–∫–µ–π, –Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ —Ç–≤–æ–µ –∏–º—è:')
    await state.set_state(Reg.name)


@user_router.message(Reg.name)
async def name(message: Message, state: FSMContext):
    global agr
    f = open('date.txt', 'a+')
    f.write(f'{message.text} ')
    await state.update_data(name=message.text)
    if agr == '–¥–∞':
        await message.answer(text=f'–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}, –ø—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å:')
        await state.set_state(Reg.password)
        f.close()
    else:
        await message.answer(text=f'–í—Å–µ, –≥—É–ª—è–π, {message.text}')
        f.write('\n')
        await state.clear()
        f.close()


@user_router.message(Reg.password)
async def password(message: Message, state: FSMContext):
    f = open('date.txt', 'a+')
    f.write(f'{message.text}\n')
    f.close()
    await state.update_data(password=message.text)
    await message.answer(text='–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
    await state.set_state(Reg.number)


@user_router.message(Reg.number)
async def number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await message.answer(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–º–∞–π–ª–∏–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/pull"')
    await state.clear()


@user_router.message(Command('pull'))
async def number(message: Message, state: FSMContext):
    await state.set_state(Pull.call)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:')


@user_router.message(Pull.call)
async def number(message: Message, state: FSMContext):
    global emoji
    f = open('date.txt', 'r')
    d = message.text.split()
    fl = False
    for i in f:
        if len(d) > 1:
            st = i.split()
            if d[0] == st[0] and d[1] == st[1]:
                fl = True
                break
    f.close()
    if fl:
        smile = random.randint(0, 4)
        await message.answer(text=f'{emoji[smile]}')
        await state.clear()
    else:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        await state.set_state(Pull.call)
